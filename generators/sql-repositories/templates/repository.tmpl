import { Injectable } from '@nestjs/common';
import { Result, UniqueEntityID } from '@softobiz-df/shared-lib';
import { EntityManager, IsNull, Not } from 'typeorm'
import { <%= namePascal %> } from 'src/domain/<%= nameCamel %>/<%= nameCamel %>';
import { I<%= namePascal %>Repository } from '../irepositories/i<%= nameCamel %>.repository';
import { <%= namePascal %>SqlMapper } from './mappers/<%= nameCamel %>.mapper'
import { <%= namePascal %>Model } from './models/<%= nameCamel %>.model'


@Injectable()
export class <%= namePascal %>SqlRepository implements I<%= namePascal %>Repository {
	
//#region constructor
	public constructor(private readonly _entityManager: EntityManager, private readonly _mapper: <%= namePascal %>SqlMapper) {}
	//#region private methods
	
	private async getById(uuid: string) {
		return this._entityManager.findOne(<%= namePascal %>Model, { uuid: uuid, deletedOn: Not(IsNull()) })
	}

	//#endregion
	private async getAll() {
    return this._entityManager.find(<%= namePascal %>Model,{})
  }

  findBy<%= namePascal %>(_input: string): Promise<Result<<%= namePascal %>>> {
    throw new Error('Method not implemented.')
  }
	//#endregion
	

	async save(input: <%= namePascal %>): Promise<Result<<%= namePascal %>>> {
		const persistence = this._mapper.toPersistence(input)
		await this._entityManager.transaction(async (em) => {
			await em.save(persistence)
		})
		return Result.ok(input)
	}
	exists(input: <%= namePascal %>): Promise<Result<boolean>> {
		throw new Error('Method not implemented.')
	}
	remove(input: UniqueEntityID): Promise<Result<void>> {
		throw new Error('Method not implemented.')
	}
	async findById(input: UniqueEntityID): Promise<Result<<%= namePascal %>>> {
		const <%= nameCamel %>Entity = await this.getById(input.toString())
		if (<%= nameCamel %>Entity) {
			return Result.ok(this._mapper.toDomain(<%= nameCamel %>Entity))
		} else {
			return Result.ok()
		}
	}
	

}
