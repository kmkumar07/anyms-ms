import { AggregateRoot,eDataSource, GenericAppError, Result,  UniqueEntityID } from '@softobiz-df/shared-lib';

interface <%= namePascal %>Props {
	name: string

}
export class <%= namePascal %> extends AggregateRoot<<%= namePascal %>Props> {

  //#region member variables
	//#endregion

	//#region constants
	//#endregion

	//#region properties
	//#endregion

	//#region private methods
	private constructor(props: <%= namePascal %>Props, id?: UniqueEntityID) {
		super(props, id)
	}
	//#endregion

	//#region private setters
	private setName(name: string) {
		this._props.name = name
		return Result.ok(this)
	}
  //#endregion

	//#region public methods
	public static create(props: <%= namePascal %>Props, id?: UniqueEntityID, dataSource?: eDataSource) {
		if (dataSource === eDataSource.STORAGE) return Result.ok(new  <%= namePascal %>(props, id))
		const  <%= nameCamel %> = new  <%= namePascal %>(Object.create(null), id)
		const validationQueue = [
			<%= nameCamel %>.setName(props.name),
			

		]
		const combinedResult = Result.combine(validationQueue)
		if (combinedResult.isFailure) return Result.fail<<%= namePascal %>>(new GenericAppError.DomainError(combinedResult.errorValue()))
		return Result.ok(<%= nameCamel %>)
	}
	//#endregion

}
